import numpy as np
import time
import matplotlib.pyplot as plt
from PIL import Image
import os

from threadpoolctl import threadpool_limits
from sklearn.cluster import KMeans

src = input("Image src: ");
image = np.array(Image.open(src), dtype=np.float32)

data = image.reshape(-1, 3)





#####################################################################
#                                                                   #
#               benchmark on different values of K:                 #
#                                                                   #
#####################################################################


# same initialization I get from my c++ program (nature.jpg)
# initial_clusters = [[[0, 0, 0]], [[39, 34, 5], [64, 71, 38]], [[29, 30, 24], [21, 27, 15], [99, 91, 76]], [[45, 43, 5], [66, 65, 37], [61, 59, 0], [164, 158, 98]], [[34, 45, 31], [248, 245, 230], [91, 85, 69], [23, 37, 0], [56, 68, 30], [120, 71, 12]], [[77, 79, 74], [29, 33, 16], [193, 198, 194], [36, 41, 18], [50, 61, 57], [22, 25, 18], [126, 141, 82], [59, 47, 0]], [[22, 23, 18], [32, 34, 20], [51, 55, 40], [231, 225, 213], [65, 56, 23], [68, 78, 43], [136, 146, 145], [96, 39, 28], [165, 174, 189], [42, 44, 33], [34, 51, 35], [255, 250, 216]], [[93, 88, 84], [38, 54, 41], [74, 54, 29], [53, 60, 27], [251, 248, 239], [38, 33, 13], [75, 64, 44], [7, 13, 1], [124, 133, 76], [66, 39, 20], [43, 32, 2], [45, 46, 12], [34, 35, 29], [32, 21, 19], [58, 68, 31], [71, 68, 59]], [[158, 123, 67], [31, 35, 21], [195, 184, 162], [32, 32, 24], [126, 122, 111], [32, 35, 18], [191, 202, 124], [174, 144, 92], [69, 68, 50], [40, 44, 29], [84, 75, 0], [49, 56, 25], [222, 215, 205], [209, 218, 215], [251, 250, 248], [53, 64, 21], [49, 56, 40], [71, 77, 49], [240, 231, 222], [51, 49, 37], [74, 82, 35], [126, 150, 150], [134, 122, 84], [125, 97, 47]], [[42, 34, 13], [83, 76, 34], [195, 202, 195], [67, 78, 48], [234, 232, 219], [158, 161, 152], [126, 125, 139], [79, 78, 73], [74, 65, 47], [133, 134, 138], [30, 34, 19], [28, 31, 20], [160, 126, 55], [137, 107, 55], [50, 56, 30], [41, 41, 33], [174, 141, 110], [38, 41, 22], [108, 117, 60], [95, 99, 110], [75, 69, 47], [46, 46, 10], [45, 52, 18], [75, 87, 37], [69, 69, 31], [23, 24, 19], [35, 39, 22], [152, 126, 75], [50, 44, 18], [42, 38, 11], [37, 39, 28], [33, 36, 17]], [[68, 72, 45], [40, 44, 29], [170, 188, 200], [75, 66, 49], [44, 42, 30], [49, 68, 49], [29, 25, 16], [64, 35, 17], [110, 102, 56], [62, 64, 17], [90, 82, 69], [216, 211, 189], [57, 86, 68], [56, 39, 0], [24, 26, 15], [146, 155, 110], [81, 85, 26], [47, 46, 25], [69, 76, 86], [64, 77, 8], [98, 104, 58], [87, 82, 88], [124, 123, 119], [214, 215, 209], [68, 73, 76], [63, 83, 30], [46, 43, 38], [134, 118, 85], [172, 129, 87], [86, 89, 104], [202, 214, 214], [83, 83, 47], [91, 89, 76], [77, 88, 105], [134, 144, 107], [61, 40, 9], [38, 39, 31], [128, 146, 98], [38, 41, 14], [117, 51, 35], [44, 52, 15], [170, 188, 200], [234, 227, 208], [122, 125, 78], [27, 28, 23], [34, 53, 57], [214, 207, 188], [53, 55, 50], [120, 116, 107], [107, 108, 112], [47, 48, 8], [93, 91, 43], [112, 111, 109], [36, 36, 26], [35, 38, 21], [123, 111, 63], [47, 58, 15], [53, 53, 43], [208, 168, 117], [38, 40, 27], [40, 40, 28], [154, 57, 66], [135, 137, 72], [91, 81, 32]], [[83, 81, 22], [36, 38, 27], [241, 234, 215], [225, 220, 214], [109, 91, 81], [58, 63, 33], [208, 203, 165], [51, 61, 26], [54, 49, 53], [91, 88, 37], [27, 45, 49], [16, 17, 12], [223, 219, 208], [24, 26, 21], [127, 109, 69], [66, 63, 30], [195, 200, 203], [62, 67, 24], [178, 193, 200], [43, 41, 16], [49, 57, 0], [197, 199, 194], [50, 51, 45], [38, 42, 28], [61, 60, 6], [133, 122, 118], [36, 38, 25], [33, 34, 28], [52, 52, 24], [67, 69, 29], [234, 226, 215], [32, 27, 0], [33, 54, 45], [113, 105, 94], [96, 108, 134], [196, 163, 132], [38, 32, 20], [60, 62, 49], [24, 27, 16], [29, 28, 0], [87, 81, 59], [49, 44, 14], [48, 52, 29], [81, 79, 54], [76, 66, 28], [78, 83, 51], [69, 75, 37], [46, 62, 59], [54, 55, 15], [62, 62, 50], [119, 112, 60], [32, 35, 24], [182, 191, 62], [98, 97, 93], [34, 37, 30], [176, 155, 102], [177, 194, 202], [38, 39, 33], [213, 219, 219], [55, 59, 42], [38, 41, 24], [43, 48, 28], [122, 133, 57], [98, 93, 74], [37, 37, 27], [100, 88, 72], [43, 47, 20], [28, 19, 4], [42, 40, 17], [24, 26, 4], [40, 44, 19], [98, 97, 92], [30, 38, 27], [31, 32, 26], [48, 56, 33], [163, 176, 159], [99, 98, 93], [166, 55, 36], [65, 71, 83], [144, 139, 99], [45, 53, 30], [52, 54, 41], [245, 93, 152], [41, 43, 21], [116, 118, 113], [8, 10, 0], [37, 37, 25], [180, 196, 196], [31, 33, 19], [113, 27, 26], [53, 63, 11], [120, 116, 113], [77, 74, 69], [37, 37, 13], [22, 27, 21], [204, 57, 145], [48, 49, 43], [33, 36, 7], [31, 31, 0], [60, 68, 45], [183, 196, 202], [59, 72, 29], [206, 208, 207], [41, 42, 34], [125, 56, 51], [64, 73, 42], [23, 24, 18], [165, 168, 173], [125, 98, 69], [66, 65, 61], [207, 209, 208], [47, 51, 28], [108, 73, 33], [54, 54, 28], [88, 102, 128], [60, 65, 35], [199, 203, 206], [39, 48, 21], [241, 233, 222], [159, 35, 93], [236, 227, 210], [165, 95, 106], [106, 107, 50], [229, 222, 212], [182, 186, 171], [72, 80, 3], [42, 43, 37], [53, 39, 28]], [[49, 53, 36], [250, 250, 252], [90, 92, 79], [18, 22, 0], [68, 72, 11], [117, 92, 61], [157, 161, 51], [55, 67, 21], [32, 34, 0], [47, 52, 12], [101, 109, 70], [190, 198, 200], [98, 97, 95], [25, 22, 5], [227, 218, 200], [45, 35, 10], [236, 231, 211], [81, 76, 34], [23, 25, 14], [86, 116, 118], [54, 58, 44], [53, 61, 71], [184, 197, 203], [21, 29, 0], [26, 28, 0], [47, 42, 23], [160, 132, 92], [236, 229, 219], [43, 46, 15], [45, 48, 29], [51, 53, 14], [58, 35, 4], [67, 90, 72], [38, 39, 33], [36, 39, 32], [26, 28, 6], [118, 100, 80], [91, 79, 19], [29, 30, 24], [59, 63, 28], [44, 46, 33], [45, 46, 6], [108, 134, 135], [96, 89, 83], [45, 43, 31], [65, 62, 27], [74, 67, 48], [55, 60, 19], [79, 63, 27], [59, 65, 0], [33, 22, 2], [21, 23, 18], [183, 196, 202], [241, 235, 223], [56, 80, 64], [195, 201, 197], [33, 28, 34], [73, 82, 77], [208, 209, 203], [29, 31, 20], [57, 59, 9], [148, 158, 150], [69, 82, 39], [30, 32, 29], [202, 214, 212], [36, 37, 29], [28, 30, 17], [74, 78, 28], [150, 136, 101], [59, 79, 28], [43, 49, 37], [66, 77, 19], [34, 35, 17], [99, 85, 72], [62, 60, 35], [73, 68, 38], [235, 233, 220], [18, 25, 7], [38, 41, 10], [62, 80, 42], [60, 66, 52], [46, 51, 31], [95, 88, 62], [128, 135, 58], [37, 40, 33], [58, 65, 34], [68, 63, 33], [70, 73, 18], [4, 3, 0], [225, 220, 214], [36, 46, 37], [152, 120, 63], [55, 64, 37], [191, 201, 203], [124, 64, 30], [103, 97, 63], [57, 64, 56], [34, 41, 23], [79, 95, 32], [72, 70, 57], [33, 40, 7], [17, 29, 19], [54, 57, 46], [60, 60, 62], [226, 219, 209], [95, 88, 42], [41, 45, 22], [76, 96, 24], [46, 46, 18], [152, 68, 40], [144, 146, 143], [59, 64, 32], [81, 73, 70], [162, 144, 120], [67, 68, 54], [102, 81, 14], [198, 202, 188], [158, 144, 83], [172, 166, 168], [122, 123, 118], [36, 36, 26], [28, 29, 11], [101, 96, 102], [35, 55, 53], [47, 51, 36], [42, 47, 24], [34, 34, 26], [54, 50, 25], [38, 38, 12], [38, 40, 27], [50, 55, 51], [41, 48, 32], [1, 2, 0], [91, 90, 95], [57, 55, 7], [60, 66, 56], [19, 21, 0], [17, 20, 0], [77, 89, 67], [142, 137, 133], [38, 46, 7], [50, 62, 26], [38, 35, 30], [11, 13, 10], [172, 188, 185], [31, 31, 29], [244, 244, 242], [54, 56, 7], [81, 79, 28], [181, 169, 91], [33, 53, 54], [243, 234, 225], [50, 49, 0], [85, 97, 25], [81, 72, 41], [107, 114, 94], [76, 106, 117], [69, 62, 44], [144, 50, 51], [91, 90, 86], [251, 250, 246], [51, 50, 45], [215, 209, 197], [189, 199, 200], [50, 52, 12], [33, 36, 29], [85, 84, 79], [68, 63, 25], [40, 41, 33], [139, 124, 65], [50, 61, 27], [182, 197, 202], [65, 70, 40], [33, 36, 29], [32, 35, 24], [130, 136, 76], [70, 58, 0], [31, 39, 26], [37, 55, 59], [131, 75, 38], [59, 66, 14], [225, 218, 212], [85, 86, 80], [227, 221, 207], [47, 52, 12], [31, 39, 0], [66, 86, 25], [31, 32, 26], [153, 129, 105], [188, 198, 199], [254, 246, 231], [71, 76, 56], [50, 47, 30], [121, 125, 48], [34, 38, 23], [30, 31, 25], [74, 67, 48], [57, 75, 13], [82, 81, 77], [85, 84, 40], [65, 66, 0], [46, 49, 42], [108, 124, 149], [48, 53, 33], [22, 28, 0], [112, 71, 49], [26, 27, 22], [57, 65, 65], [28, 24, 21], [97, 96, 104], [97, 98, 56], [24, 29, 22], [117, 69, 21], [54, 50, 25], [68, 47, 16], [162, 156, 96], [30, 31, 15], [105, 107, 104], [21, 22, 6], [33, 34, 28], [191, 199, 202], [22, 26, 12], [50, 55, 49], [235, 226, 217], [121, 128, 87], [34, 41, 8], [246, 242, 233], [43, 45, 32], [46, 53, 33], [32, 34, 21], [16, 17, 12], [43, 45, 32], [42, 42, 6], [217, 216, 211], [55, 55, 19], [118, 122, 133], [52, 55, 10], [64, 73, 86], [55, 61, 57], [66, 69, 38], [49, 48, 18], [31, 34, 27], [93, 106, 63], [17, 19, 18], [42, 50, 0], [118, 105, 88], [71, 64, 69], [37, 38, 32], [32, 33, 27], [28, 30, 16], [29, 33, 19], [42, 47, 40], [26, 40, 40], [118, 125, 135], [80, 88, 65], [72, 69, 52]]]
# times = [];

# for clusters in initial_clusters:

#   k = len(clusters);
#   kmeans = KMeans(n_clusters=k, random_state=42, n_init=1, init=clusters, tol=0.0, max_iter=50)

#   start_time = time.time()
#   kmeans.fit(data)
#   end_time = time.time()

#   times.append((end_time - start_time) * 1000 / kmeans.n_iter_);


# print(times);





#####################################################################
#                                                                   #
#             benchmark on different number of threads              #
#                                                                   #
#####################################################################


# same initialization I get from my c++ program (monkey.jpg)
initial_clusters = [[247, 83, 48], [221, 191, 83], [246, 97, 28], [201, 209, 214], [83, 71, 52], [103, 159, 186], [71, 154, 222], [170, 199, 194], [203, 60, 40], [243, 64, 15], [153, 196, 225], [236, 116, 132], [144, 139, 121], [146, 199, 232], [85, 105, 135], [90, 100, 86]]
times = [];

for num_threads in [1, 1, 2, 3, 4]: # first iteration is just warm-up

    k = len(initial_clusters);
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=1, init=initial_clusters, tol=0.0, max_iter=50)

    start_time = time.time()
    with threadpool_limits(limits=num_threads, user_api='openmp'):
        kmeans.fit(data)
    end_time = time.time()

    times.append((end_time - start_time) * 1000 / kmeans.n_iter_);


print(times);
